{
  "stats": {
    "suites": 4,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2024-09-29T13:56:38.106Z",
    "end": "2024-09-29T13:56:52.856Z",
    "duration": 14750,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d100698d-9e17-4bb4-8fe8-2373fe12bfbf",
      "title": "",
      "fullFile": "cypress\\integration\\board_tests.spec.js",
      "file": "cypress\\integration\\board_tests.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6455d6fb-8912-4fda-88eb-54c4238aaf59",
          "title": "Trello API CRUD Operations",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0f0bcf3a-11eb-4a94-9d2e-04ba7ca6fa51",
              "title": "Board CRUD Operations",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Create a new Trello board",
                  "fullTitle": "Trello API CRUD Operations Board CRUD Operations Create a new Trello board",
                  "timedOut": null,
                  "duration": 1232,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"POST\",\n  url: `${baseURL}/1/boards`,\n  qs: {\n    name: \"My first board\",\n    key: apiKey,\n    token: apiToken\n  }\n}).then(response => {\n  const res = response.body;\n  boardId = res.id;\n  expect(response.status).to.eql(200);\n  cy.log(`Board created with ID: ${boardId}`);\n});",
                  "err": {},
                  "uuid": "e3285967-2e0f-4c6e-909f-522c1e498018",
                  "parentUUID": "0f0bcf3a-11eb-4a94-9d2e-04ba7ca6fa51",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Retrieve the Trello board",
                  "fullTitle": "Trello API CRUD Operations Board CRUD Operations Retrieve the Trello board",
                  "timedOut": null,
                  "duration": 512,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"GET\",\n  url: `${baseURL}/1/boards/${boardId}`,\n  qs: {\n    key: apiKey,\n    token: apiToken\n  }\n}).then(response => {\n  expect(response.status).to.eql(200);\n  expect(response.body.id).to.eql(boardId);\n  cy.log(`Retrieved board with ID: ${boardId}`);\n});",
                  "err": {},
                  "uuid": "4eafda92-7470-4fcf-87fe-283142260eaf",
                  "parentUUID": "0f0bcf3a-11eb-4a94-9d2e-04ba7ca6fa51",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update the Trello board",
                  "fullTitle": "Trello API CRUD Operations Board CRUD Operations Update the Trello board",
                  "timedOut": null,
                  "duration": 568,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"PUT\",\n  url: `${baseURL}/1/boards/${boardId}`,\n  qs: {\n    name: \"Updated board name\",\n    key: apiKey,\n    token: apiToken\n  }\n}).then(response => {\n  expect(response.status).to.eql(200);\n  expect(response.body.name).to.eql(\"Updated board name\");\n  cy.log(`Updated board name to: \"Updated board name\"`);\n});",
                  "err": {},
                  "uuid": "c0f84acf-6daa-4e6e-ac84-09582a250bb4",
                  "parentUUID": "0f0bcf3a-11eb-4a94-9d2e-04ba7ca6fa51",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete the Trello board",
                  "fullTitle": "Trello API CRUD Operations Board CRUD Operations Delete the Trello board",
                  "timedOut": null,
                  "duration": 1396,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"DELETE\",\n  url: `${baseURL}/1/boards/${boardId}`,\n  qs: {\n    key: apiKey,\n    token: apiToken\n  }\n}).then(response => {\n  expect(response.status).to.eql(200);\n  cy.log(`Deleted board with ID: ${boardId}`);\n});",
                  "err": {},
                  "uuid": "d87d2dc0-7df0-459e-9319-046594dc09ef",
                  "parentUUID": "0f0bcf3a-11eb-4a94-9d2e-04ba7ca6fa51",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e3285967-2e0f-4c6e-909f-522c1e498018",
                "4eafda92-7470-4fcf-87fe-283142260eaf",
                "c0f84acf-6daa-4e6e-ac84-09582a250bb4",
                "d87d2dc0-7df0-459e-9319-046594dc09ef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3708,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "85083050-9567-4696-9d6c-f7395110fea4",
              "title": "List CRUD Operations",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Create a new list on the board",
                  "fullTitle": "Trello API CRUD Operations List CRUD Operations Create a new list on the board",
                  "timedOut": null,
                  "duration": 1272,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"POST\",\n  url: `${baseURL}/1/lists`,\n  qs: {\n    name: \"To Do\",\n    idBoard: boardId,\n    key: apiKey,\n    token: apiToken\n  }\n}).then(response => {\n  listId = response.body.id;\n  expect(response.status).to.eql(200);\n  cy.log(`List created with ID: ${listId}`);\n});",
                  "err": {},
                  "uuid": "f6f78b95-5e3a-427b-912d-25931ed8dfd9",
                  "parentUUID": "85083050-9567-4696-9d6c-f7395110fea4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Retrieve the list",
                  "fullTitle": "Trello API CRUD Operations List CRUD Operations Retrieve the list",
                  "timedOut": null,
                  "duration": 543,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"GET\",\n  url: `${baseURL}/1/lists/${listId}`,\n  qs: {\n    key: apiKey,\n    token: apiToken\n  }\n}).then(response => {\n  expect(response.status).to.eql(200);\n  expect(response.body.name).to.eql(\"To Do\");\n  cy.log(`Retrieved list with ID: ${listId}`);\n});",
                  "err": {},
                  "uuid": "2d563e4c-6a7f-47bb-9de9-eb09f1e8466f",
                  "parentUUID": "85083050-9567-4696-9d6c-f7395110fea4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update the list name",
                  "fullTitle": "Trello API CRUD Operations List CRUD Operations Update the list name",
                  "timedOut": null,
                  "duration": 628,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"PUT\",\n  url: `${baseURL}/1/lists/${listId}`,\n  qs: {\n    name: \"In Progress\",\n    key: apiKey,\n    token: apiToken\n  }\n}).then(response => {\n  expect(response.status).to.eql(200);\n  expect(response.body.name).to.eql(\"In Progress\");\n  cy.log(`Updated list name to: \"In Progress\"`);\n});",
                  "err": {},
                  "uuid": "5e47bb04-738c-4ae0-898e-acec11408b6c",
                  "parentUUID": "85083050-9567-4696-9d6c-f7395110fea4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Archive the list",
                  "fullTitle": "Trello API CRUD Operations List CRUD Operations Archive the list",
                  "timedOut": null,
                  "duration": 581,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"PUT\",\n  url: `${baseURL}/1/lists/${listId}/closed`,\n  qs: {\n    value: true,\n    key: apiKey,\n    token: apiToken\n  }\n}).then(response => {\n  expect(response.status).to.eql(200);\n  expect(response.body.closed).to.eql(true);\n  cy.log(`Archived list with ID: ${listId}`);\n});",
                  "err": {},
                  "uuid": "d327af5f-0304-442d-a730-d54eac7b418b",
                  "parentUUID": "85083050-9567-4696-9d6c-f7395110fea4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f6f78b95-5e3a-427b-912d-25931ed8dfd9",
                "2d563e4c-6a7f-47bb-9de9-eb09f1e8466f",
                "5e47bb04-738c-4ae0-898e-acec11408b6c",
                "d327af5f-0304-442d-a730-d54eac7b418b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3024,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "43801562-6397-4463-8cbb-ca65fe07c2c2",
              "title": "Card CRUD Operations",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Create a new card in the list",
                  "fullTitle": "Trello API CRUD Operations Card CRUD Operations Create a new card in the list",
                  "timedOut": null,
                  "duration": 1811,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"POST\",\n  url: `${baseURL}/1/cards`,\n  qs: {\n    name: \"Task 1\",\n    idList: listId,\n    key: apiKey,\n    token: apiToken\n  }\n}).then(response => {\n  cardId = response.body.id;\n  expect(response.status).to.eql(200);\n  cy.log(`Card created with ID: ${cardId}`);\n});",
                  "err": {},
                  "uuid": "c3135780-943f-442a-9b56-b505e7257f88",
                  "parentUUID": "43801562-6397-4463-8cbb-ca65fe07c2c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Retrieve the card",
                  "fullTitle": "Trello API CRUD Operations Card CRUD Operations Retrieve the card",
                  "timedOut": null,
                  "duration": 998,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"GET\",\n  url: `${baseURL}/1/cards/${cardId}`,\n  qs: {\n    key: apiKey,\n    token: apiToken\n  }\n}).then(response => {\n  expect(response.status).to.eql(200);\n  expect(response.body.name).to.eql(\"Task 1\");\n  cy.log(`Retrieved card with ID: ${cardId}`);\n});",
                  "err": {},
                  "uuid": "ce53e1df-909c-4094-8a9f-28eb3cd0b18d",
                  "parentUUID": "43801562-6397-4463-8cbb-ca65fe07c2c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update the card name",
                  "fullTitle": "Trello API CRUD Operations Card CRUD Operations Update the card name",
                  "timedOut": null,
                  "duration": 682,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"PUT\",\n  url: `${baseURL}/1/cards/${cardId}`,\n  qs: {\n    name: \"Updated Task 1\",\n    key: apiKey,\n    token: apiToken\n  }\n}).then(response => {\n  expect(response.status).to.eql(200);\n  expect(response.body.name).to.eql(\"Updated Task 1\");\n  cy.log(`Updated card name to: \"Updated Task 1\"`);\n});",
                  "err": {},
                  "uuid": "e7cad61c-b5a3-4765-9f6d-a83c467f72b5",
                  "parentUUID": "43801562-6397-4463-8cbb-ca65fe07c2c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete the card",
                  "fullTitle": "Trello API CRUD Operations Card CRUD Operations Delete the card",
                  "timedOut": null,
                  "duration": 783,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"DELETE\",\n  url: `${baseURL}/1/cards/${cardId}`,\n  qs: {\n    key: apiKey,\n    token: apiToken\n  }\n}).then(response => {\n  expect(response.status).to.eql(200);\n  cy.log(`Deleted card with ID: ${cardId}`);\n});",
                  "err": {},
                  "uuid": "cdf84e32-9cc1-4dc9-be2d-6030dfd613ef",
                  "parentUUID": "43801562-6397-4463-8cbb-ca65fe07c2c2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c3135780-943f-442a-9b56-b505e7257f88",
                "ce53e1df-909c-4094-8a9f-28eb3cd0b18d",
                "e7cad61c-b5a3-4765-9f6d-a83c467f72b5",
                "cdf84e32-9cc1-4dc9-be2d-6030dfd613ef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4274,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}